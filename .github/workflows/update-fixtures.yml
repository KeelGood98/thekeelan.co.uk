name: Update fixtures

on:
  workflow_dispatch: {}
  schedule:
    - cron: "23 5 * * *"   # daily 05:23 UTC

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build assets/fixtures.json from TheSportsDB (no key)
        run: |
          python - <<'PY'
          import json, os, urllib.request, datetime

          TEAM_ID = "133612"  # Manchester United (TheSportsDB)
          URL_NEXT = f"https://www.thesportsdb.com/api/v1/json/3/eventsnext.php?id={TEAM_ID}"
          URL_LAST = f"https://www.thesportsdb.com/api/v1/json/3/eventslast.php?id={TEAM_ID}"

          def fetch(url):
            with urllib.request.urlopen(url, timeout=45) as r:
              return json.loads(r.read().decode("utf-8"))

          def map_event(e):
            # Dates: TheSportsDB returns dateEvent (YYYY-MM-DD) and strTime (HH:MM:SS)
            date = (e.get("dateEvent") or e.get("dateEventLocal") or "")[:10]
            time = (e.get("strTime") or e.get("strTimeLocal") or "00:00")[:5]
            comp = e.get("strLeague") or ""
            home = e.get("strHomeTeam") or ""
            away = e.get("strAwayTeam") or ""
            venue = e.get("strVenue") or ""
            status = "upcoming"
            score = None
            if e.get("intHomeScore") is not None and e.get("intAwayScore") is not None:
              status = "FT"
              score = f'{e["intHomeScore"]}â€“{e["intAwayScore"]}'
            return {
              "date": date, "time": time, "comp": comp,
              "home": home, "away": away, "status": status, "score": score,
              "venue": venue, "tv": []
            }

          next_data = fetch(URL_NEXT)
          last_data = fetch(URL_LAST)
          next_events = [map_event(e) for e in (next_data.get("events") or [])]
          last_events = [map_event(e) for e in (last_data.get("results") or [])]

          fixtures = next_events + last_events

          # Merge UK TV badges overrides if present
          tv = {}
          try:
            with open("assets/tv_overrides.json","r",encoding="utf-8") as f:
              tv = json.load(f)
          except FileNotFoundError:
            pass

          for fx in fixtures:
            opponent = fx["away"] if fx["home"].lower().startswith("man") else fx["home"]
            key = f'{fx["date"]} {opponent}'
            if key in tv:
              fx["tv"] = tv[key]

          # Sort chronologically, keep a sensible window
          fixtures.sort(key=lambda x: (x["date"], x["time"]))
          # De-dup by (date, home, away)
          seen = set(); dedup = []
          for f in fixtures:
            k = (f["date"], f["home"], f["away"])
            if k not in seen:
              seen.add(k); dedup.append(f)

          os.makedirs("assets", exist_ok=True)
          with open("assets/fixtures.json","w",encoding="utf-8") as f:
            json.dump(dedup, f, ensure_ascii=False, indent=2)

          print("Wrote assets/fixtures.json with", len(dedup), "entries")
          PY

      - name: Commit & push if changed
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add assets/fixtures.json
            git commit -m "chore: auto-update fixtures from TheSportsDB [skip ci]"
            git push
          else
            echo "No changes."
          fi
