name: Update fixtures

on:
  workflow_dispatch: {}
  schedule:
    - cron: "23 5 * * *"  # daily 05:23 UTC

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build assets (fixtures & table)
        env:
          FD_TOKEN: ${{ secrets.FOOTBALL_DATA_API_KEY }} # optional, enables full 20-team table
        run: |
          python - <<'PY'
          import json, os, urllib.request, urllib.parse, datetime, sys, ssl
          ssl._create_default_https_context = ssl._create_unverified_context

          # ---- CONFIG ----
          TEAM_ID   = "133612"                      # Manchester United (TheSportsDB)
          TEAM_NAME = "Manchester United"
          LEAGUE_ID = "4328"                        # Premier League (TheSportsDB)
          LEAGUE    = "English Premier League"

          def fetch(url: str, headers=None):
            req = urllib.request.Request(url, headers=headers or {})
            with urllib.request.urlopen(req, timeout=60) as r:
              return json.loads(r.read().decode("utf-8"))

          def current_season() -> str:
            today = datetime.date.today()
            return f"{today.year}-{today.year+1}" if today.month >= 8 else f"{today.year-1}-{today.year}"

          def map_event(e: dict) -> dict:
            date = (e.get("dateEvent") or e.get("dateEventLocal") or "")[:10]
            time = (e.get("strTime") or e.get("strTimeLocal") or "00:00")[:5]
            comp = e.get("strLeague") or ""
            home = e.get("strHomeTeam") or ""
            away = e.get("strAwayTeam") or ""
            venue = e.get("strVenue") or ""
            status = "upcoming"
            score = None
            if e.get("intHomeScore") is not None and e.get("intAwayScore") is not None:
              status = "FT"
              score = f'{e["intHomeScore"]}â€“{e["intAwayScore"]}'
            return {
              "date": date, "time": time, "comp": comp,
              "home": home, "away": away, "status": status, "score": score,
              "venue": venue, "tv": [],
              "homeBadge": None, "awayBadge": None,
              # keep team IDs so we can filter robustly
              "idHomeTeam": e.get("idHomeTeam"), "idAwayTeam": e.get("idAwayTeam"),
            }

          def build_badge_map() -> dict:
            url = "https://www.thesportsdb.com/api/v1/json/3/search_all_teams.php?l=" + urllib.parse.quote(LEAGUE)
            try:
              data = fetch(url)
              teams = data.get("teams") or []
              return { (t.get("strTeam") or "").lower(): t.get("strTeamBadge") for t in teams if t.get("strTeam") }
            except Exception as ex:
              print("Badge map fetch failed:", ex, file=sys.stderr)
              return {}

          # sanity check the team id
          try:
            team_info = fetch(f"https://www.thesportsdb.com/api/v1/json/3/lookupteam.php?id={TEAM_ID}")
            looked = (team_info.get("teams") or [{}])[0].get("strTeam") or ""
            print("lookupteam =", looked)
          except Exception as ex:
            print("lookupteam failed:", ex, file=sys.stderr)

          season = current_season()
          today  = datetime.date.today()
          print("Season:", season)

          # ---- gather fixtures ----
          url_season = f"https://www.thesportsdb.com/api/v1/json/3/eventsseason.php?id={TEAM_ID}&s={season}"
          url_next   = f"https://www.thesportsdb.com/api/v1/json/3/eventsnext.php?id={TEAM_ID}"
          url_last   = f"https://www.thesportsdb.com/api/v1/json/3/eventslast.php?id={TEAM_ID}"

          all_events = []
          for name, url, key in [
            ("season", url_season, "events"),
            ("next",   url_next,   "events"),
            ("last",   url_last,   "results"),
          ]:
            try:
              data = fetch(url)
              events = data.get(key) or []
              print(f"Fetched {name}: {len(events)}")
              all_events.extend(events)
            except Exception as ex:
              print(f"Fetch {name} failed:", ex, file=sys.stderr)

          mapped = [map_event(e) for e in all_events]

          # HARD FILTER by team ID (prevents Bolton or anything else)
          def involves_us(m):
            return (str(m.get("idHomeTeam") or "") == TEAM_ID) or (str(m.get("idAwayTeam") or "") == TEAM_ID)
          mapped = [m for m in mapped if involves_us(m)]

          # If still nothing future, fallback to season-only
          has_future = any(((m["date"] and datetime.date.fromisoformat(m["date"]) >= today)) for m in mapped)
          if not has_future:
            try:
              season_only = fetch(url_season).get("events") or []
              mapped = [map_event(e) for e in season_only]
              mapped = [m for m in mapped if involves_us(m)]
              print("Fallback used: season-only fixtures:", len(mapped))
            except Exception as ex:
              print("Fallback season fetch failed:", ex, file=sys.stderr)

          # Dedup + sort
          fixtures = []
          seen = set()
          for f in mapped:
            k = (f["date"], f["home"], f["away"])
            if f["date"] and k not in seen:
              seen.add(k); fixtures.append(f)
          fixtures.sort(key=lambda x: (x["date"], x["time"], x["home"], x["away"]))

          # Badges for fixtures
          badge_map = build_badge_map()
          for fx in fixtures:
            fx["homeBadge"] = badge_map.get((fx["home"] or "").lower())
            fx["awayBadge"] = badge_map.get((fx["away"] or "").lower())

          # TV overrides (optional)
          try:
            with open("assets/tv_overrides.json","r",encoding="utf-8") as f:
              tv_overrides = json.load(f)
          except FileNotFoundError:
            tv_overrides = {}

          for fx in fixtures:
            opp = fx["away"] if (fx["home"] or "").lower() == TEAM_NAME.lower() else fx["home"]
            key = f'{fx["date"]} {opp}'
            if key in tv_overrides:
              fx["tv"] = tv_overrides[key]

          os.makedirs("assets", exist_ok=True)
          with open("assets/fixtures.json","w",encoding="utf-8") as out:
            json.dump(fixtures, out, ensure_ascii=False, indent=2)
          print("Wrote fixtures:", len(fixtures))

          # ---- league table ----
          def write_table(rows, source):
            with open("assets/table.json","w",encoding="utf-8") as out:
              json.dump(rows, out, ensure_ascii=False, indent=2)
            print(f"Wrote table rows: {len(rows)} (source: {source})")

          # TheSportsDB first
          try:
            tab = fetch(f"https://www.thesportsdb.com/api/v1/json/3/lookuptable.php?l={LEAGUE_ID}&s={season}").get("table") or []
            trows = []
            for t in tab:
              name  = t.get("strTeam") or ""
              badge = t.get("strTeamBadge") or badge_map.get(name.lower())
              trows.append({
                "rank": int(t.get("intRank") or 0),
                "team": name,
                "played": int(t.get("intPlayed") or 0),
                "win": int(t.get("intWin") or 0),
                "draw": int(t.get("intDraw") or 0),
                "loss": int(t.get("intLoss") or 0),
                "gf": int(t.get("intGoalsFor") or 0),
                "ga": int(t.get("intGoalsAgainst") or 0),
                "gd": int(t.get("intGoalsFor") or 0) - int(t.get("intGoalsAgainst") or 0),
                "points": int(t.get("intPoints") or 0),
                "badge": badge,
              })
            trows = [r for r in trows if r["team"]]
            trows.sort(key=lambda r: r["rank"] if r["rank"] else 999)
          except Exception as ex:
            print("TSDB table fetch failed:", ex, file=sys.stderr)
            trows = []

          # Fallback to football-data.org if fewer than 10 rows and token present
          token = os.environ.get("FD_TOKEN","").strip()
          if len(trows) < 10 and token:
            try:
              year = int(current_season().split("-")[0])
              data = fetch(f"https://api.football-data.org/v4/competitions/PL/standings?season={year}",
                           headers={"X-Auth-Token": token})
              standings = (data.get("standings") or [])[0].get("table") or []
              trows = []
              for it in standings:
                team = it.get("team") or {}
                trows.append({
                  "rank": int(it.get("position") or 0),
                  "team": team.get("name") or "",
                  "played": int(it.get("playedGames") or 0),
                  "win": int(it.get("won") or 0),
                  "draw": int(it.get("draw") or 0),
                  "loss": int(it.get("lost") or 0),
                  "gf": int(it.get("goalsFor") or 0),
                  "ga": int(it.get("goalsAgainst") or 0),
                  "gd": int(it.get("goalDifference") or 0),
                  "points": int(it.get("points") or 0),
                  "badge": team.get("crest") or badge_map.get((team.get("name") or "").lower()),
                })
              trows = [r for r in trows if r["team"]]
              trows.sort(key=lambda r: r["rank"] if r["rank"] else 999)
              write_table(trows, "football-data.org")
            except Exception as ex:
              print("football-data fallback failed:", ex, file=sys.stderr)
              write_table(trows, "thesportsdb (partial)")
          else:
            src = "thesportsdb" if len(trows) >= 10 else "thesportsdb (partial)"
            write_table(trows, src)
          PY

      - name: Commit & push if changed
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add assets/fixtures.json assets/table.json
            git commit -m "chore: update fixtures & table (ID filter, full table fallback, badges) [skip ci]"
            git push
          else
            echo "No changes."
          fi
