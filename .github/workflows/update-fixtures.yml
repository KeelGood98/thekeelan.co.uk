name: Update fixtures

on:
  workflow_dispatch: {}
  schedule:
    - cron: "23 5 * * *"  # daily 05:23 UTC

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build assets (fixtures & table)
        env:
          FD_TOKEN: ${{ secrets.FOOTBALL_DATA_API_KEY }}  # REQUIRED for fallbacks
        run: |
          python - <<'PY'
          import json, os, urllib.request, urllib.parse, datetime, sys, ssl
          ssl._create_default_https_context = ssl._create_unverified_context

          # ---------- CONFIG ----------
          TSB_TEAM_ID   = "133612"                     # Manchester United (TheSportsDB)
          FD_TEAM_ID    = "66"                         # Manchester United (football-data.org)
          LEAGUE_ID     = "4328"                       # Premier League (TheSportsDB)
          LEAGUE_NAME   = "English Premier League"

          def fetch(url: str, headers=None):
            req = urllib.request.Request(url, headers=headers or {})
            with urllib.request.urlopen(req, timeout=60) as r:
              return json.loads(r.read().decode("utf-8"))

          def current_season() -> str:
            t = datetime.date.today()
            return f"{t.year}-{t.year+1}" if t.month >= 8 else f"{t.year-1}-{t.year}"

          def map_tsb_event(e: dict) -> dict:
            date = (e.get("dateEvent") or e.get("dateEventLocal") or "")[:10]
            time = (e.get("strTime") or e.get("strTimeLocal") or "00:00")[:5]
            comp = e.get("strLeague") or ""
            home = e.get("strHomeTeam") or ""
            away = e.get("strAwayTeam") or ""
            venue = e.get("strVenue") or ""
            status = "upcoming"
            score = None
            if e.get("intHomeScore") is not None and e.get("intAwayScore") is not None:
              status = "FT"
              score = f'{e["intHomeScore"]}–{e["intAwayScore"]}'
            return {
              "date": date, "time": time, "comp": comp,
              "home": home, "away": away, "status": status, "score": score,
              "venue": venue, "tv": [],
              "homeBadge": None, "awayBadge": None,
              "idHomeTeam": e.get("idHomeTeam"), "idAwayTeam": e.get("idAwayTeam"),
            }

          def build_badge_map() -> dict:
            url = "https://www.thesportsdb.com/api/v1/json/3/search_all_teams.php?l=" + urllib.parse.quote(LEAGUE_NAME)
            try:
              data = fetch(url)
              teams = data.get("teams") or []
              return { (t.get("strTeam") or "").lower(): t.get("strTeamBadge") for t in teams if t.get("strTeam") }
            except Exception as ex:
              print("Badge map fetch failed:", ex, file=sys.stderr)
              return {}

          # ---------- FIXTURES (TSB first, FD fallback for future) ----------
          season = current_season()
          today  = datetime.date.today()
          print("Season:", season)

          url_season = f"https://www.thesportsdb.com/api/v1/json/3/eventsseason.php?id={TSB_TEAM_ID}&s={season}"
          url_next   = f"https://www.thesportsdb.com/api/v1/json/3/eventsnext.php?id={TSB_TEAM_ID}"
          url_last   = f"https://www.thesportsdb.com/api/v1/json/3/eventslast.php?id={TSB_TEAM_ID}"

          all_events = []
          for name, url, key in [
            ("season", url_season, "events"),
            ("next",   url_next,   "events"),
            ("last",   url_last,   "results"),
          ]:
            try:
              data = fetch(url)
              events = data.get(key) or []
              print(f"Fetched {name}: {len(events)}")
              all_events.extend(events)
            except Exception as ex:
              print(f"Fetch {name} failed:", ex, file=sys.stderr)

          tsb = [map_tsb_event(e) for e in all_events]
          tsb = [m for m in tsb if str(m.get("idHomeTeam") or "") == TSB_TEAM_ID or str(m.get("idAwayTeam") or "") == TSB_TEAM_ID]

          future_tsb = [m for m in tsb if m["date"] and datetime.date.fromisoformat(m["date"]) >= today]
          print("TSB future fixtures:", len(future_tsb))

          # If no future via TSB, fallback to football-data.org for the next 90 days
          fixtures = tsb[:]  # keep past results from TSB
          token = os.environ.get("FD_TOKEN","").strip()
          if not future_tsb and token:
            try:
              dateFrom = today.isoformat()
              dateTo   = (today + datetime.timedelta(days=90)).isoformat()
              url = f"https://api.football-data.org/v4/teams/{FD_TEAM_ID}/matches?dateFrom={dateFrom}&dateTo={dateTo}"
              fd = fetch(url, headers={"X-Auth-Token": token})
              matches = fd.get("matches") or []
              print("FD matches (90d):", len(matches))

              for m in matches:
                utc = m.get("utcDate","")[:10]
                comp = (m.get("competition") or {}).get("name") or ""
                home = ((m.get("homeTeam") or {}).get("name") or "")
                away = ((m.get("awayTeam") or {}).get("name") or "")
                full = (m.get("score") or {}).get("fullTime") or {}
                hs, as_ = full.get("home", None), full.get("away", None)
                status = "FT" if (hs is not None and as_ is not None) else ("UPCOMING" if utc >= today.isoformat() else "upcoming")
                score = f"{hs}–{as_}" if status == "FT" else None
                fixtures.append({
                  "date": utc, "time": "TBC", "comp": comp,
                  "home": home, "away": away, "status": status, "score": score,
                  "venue": "", "tv": [],
                  "homeBadge": None, "awayBadge": None,
                  "idHomeTeam": None, "idAwayTeam": None,
                })
            except Exception as ex:
              print("FD fixtures fallback failed:", ex, file=sys.stderr)

          # Dedup + sort
          clean = []
          seen = set()
          for f in fixtures:
            k = (f["date"], f["home"], f["away"])
            if f["date"] and k not in seen:
              seen.add(k); clean.append(f)
          clean.sort(key=lambda x: (x["date"], x["time"], x["home"], x["away"]))

          # Add badges
          badge_map = build_badge_map()
          for fx in clean:
            fx["homeBadge"] = badge_map.get((fx["home"] or "").lower())
            fx["awayBadge"] = badge_map.get((fx["away"] or "").lower())

          os.makedirs("assets", exist_ok=True)
          with open("assets/fixtures.json","w",encoding="utf-8") as out:
            json.dump(clean, out, ensure_ascii=False, indent=2)
          print("Wrote fixtures:", len(clean))

          # ---------- TABLE (TSB first, FD fallback to full 20) ----------
          def write_table(rows, src):
            with open("assets/table.json","w",encoding="utf-8") as out:
              json.dump(rows, out, ensure_ascii=False, indent=2)
            print(f"Wrote table rows: {len(rows)} (source: {src})")

          rows = []
          try:
            tab = fetch(f"https://www.thesportsdb.com/api/v1/json/3/lookuptable.php?l={LEAGUE_ID}&s={season}").get("table") or []
            for t in tab:
              rows.append({
                "rank": int(t.get("intRank") or 0),
                "team": t.get("strTeam") or "",
                "played": int(t.get("intPlayed") or 0),
                "win": int(t.get("intWin") or 0),
                "draw": int(t.get("intDraw") or 0),
                "loss": int(t.get("intLoss") or 0),
                "gf": int(t.get("intGoalsFor") or 0),
                "ga": int(t.get("intGoalsAgainst") or 0),
                "gd": int(t.get("intGoalsFor") or 0) - int(t.get("intGoalsAgainst") or 0),
                "points": int(t.get("intPoints") or 0),
                "badge": t.get("strTeamBadge"),
              })
            rows = [r for r in rows if r["team"]]
            rows.sort(key=lambda r: r["rank"] if r["rank"] else 999)
            print("TSB table size:", len(rows))
          except Exception as ex:
            print("TSB table fetch failed:", ex, file=sys.stderr)
            rows = []

          if len(rows) < 10 and token:
            try:
              year = int(current_season().split("-")[0])
              data = fetch(f"https://api.football-data.org/v4/competitions/PL/standings?season={year}",
                           headers={"X-Auth-Token": token})
              standings = (data.get("standings") or [])[0].get("table") or []
              rows = []
              for it in standings:
                team = it.get("team") or {}
                rows.append({
                  "rank": int(it.get("position") or 0),
                  "team": team.get("name") or "",
                  "played": int(it.get("playedGames") or 0),
                  "win": int(it.get("won") or 0),
                  "draw": int(it.get("draw") or 0),
                  "loss": int(it.get("lost") or 0),
                  "gf": int(it.get("goalsFor") or 0),
                  "ga": int(it.get("goalsAgainst") or 0),
                  "gd": int(it.get("goalDifference") or 0),
                  "points": int(it.get("points") or 0),
                  "badge": team.get("crest"),
                })
              rows = [r for r in rows if r["team"]]
              rows.sort(key=lambda r: r["rank"] if r["rank"] else 999)
              write_table(rows, "football-data.org")
            except Exception as ex:
              print("FD table fallback failed:", ex, file=sys.stderr)
              write_table(rows, "thesportsdb (partial)")
          else:
            write_table(rows, "thesportsdb" if len(rows) >= 10 else "thesportsdb (partial)")

          # Always bump a stamp so Pages redeploys
          from datetime import datetime, timezone
          with open("assets/update_stamp.txt","w",encoding="utf-8") as f:
            f.write(datetime.now(timezone.utc).isoformat())
          print("Stamp written.")
          PY

      - name: Commit & push (always)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add assets/*
          if git diff --cached --quiet; then
            git commit --allow-empty -m "chore: force pages rebuild [skip ci]"
          else
            git commit -m "chore: update fixtures & table (+FD fallbacks) [skip ci]"
          fi
          git push
