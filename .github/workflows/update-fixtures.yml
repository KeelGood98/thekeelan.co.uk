name: Update site data (FD table + TSDB MUFC)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "23 5 * * *"   # daily 05:23 UTC

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build assets
        env:
          FD_TOKEN: ${{ secrets.FOOTBALL_DATA_API_KEY }}
        run: |
          python - <<'PY'
          import json, os, pathlib, time, urllib.request, urllib.error, datetime

          def get(url, headers=None, tries=3, sleep=1.2):
            req = urllib.request.Request(url, headers=headers or {})
            for i in range(tries):
              try:
                with urllib.request.urlopen(req, timeout=20) as r:
                  return json.loads(r.read().decode('utf-8'))
              except Exception as e:
                if i == tries-1: raise
                time.sleep(sleep)
            return None

          # --- Premier League table from football-data.org (requires token) ---
          fd_token = os.environ.get("FD_TOKEN","").strip()
          if not fd_token:
            raise SystemExit("Missing FOOTBALL_DATA_API_KEY secret.")

          # PL competition code: PL
          fd_headers = {"X-Auth-Token": fd_token, "User-Agent":"thekeelan-bot/1.0"}
          fd = get("https://api.football-data.org/v4/competitions/PL/standings", headers=fd_headers)

          # Map to our table format
          standings = []
          # choose the 'TOTAL' table from the first standings entry
          for row in (fd.get("standings", [{}])[0].get("table", []) if fd else []):
            team = row["team"]
            stats = {
              "pos": row["position"],
              "team": team["shortName"] or team["name"],
              "played": row["playedGames"],
              "won": row["won"],
              "drawn": row["draw"],
              "lost": row["lost"],
              "gf": row["goalsFor"],
              "ga": row["goalsAgainst"],
              "gd": row["goalDifference"],
              "pts": row["points"],
              # football-data doesnâ€™t host badges reliably, but many teams have crest URLs:
              "badge": team.get("crest")
            }
            standings.append(stats)

          table = {
            "season": fd.get("season", {}).get("startDate","")[:4] + "/" + fd.get("season", {}).get("endDate","")[2:4] if fd else "",
            "updated": datetime.datetime.utcnow().isoformat()+"Z",
            "standings": standings
          }

          # --- Manchester United fixtures/results from TheSportsDB ---
          # 1) Find team ID
          team = get("https://www.thesportsdb.com/api/v1/json/3/searchteams.php?t=Manchester%20United")
          team_id = None
          try:
            team_id = team["teams"][0]["idTeam"]
          except Exception:
            raise SystemExit("Could not resolve Manchester United team id from TheSportsDB.")

          # 2) last 15 results + next 15 fixtures
          last = get(f"https://www.thesportsdb.com/api/v1/json/3/eventslast.php?id={team_id}") or {}
          nxt  = get(f"https://www.thesportsdb.com/api/v1/json/3/eventsnext.php?id={team_id}") or {}

          def map_event(e):
            # Handles both played and scheduled
            date = (e.get("dateEvent") or e.get("strTimestamp") or "") + "T" + (e.get("strTime") or "00:00:00")
            # Some TSDB timestamps already include time zone; keep simple UTC-like string
            home = e.get("strHomeTeam") or ""
            away = e.get("strAwayTeam") or ""
            comp = e.get("strLeague") or (e.get("strLeagueShort") or "")
            status = "FINISHED" if (e.get("intHomeScore") is not None and e.get("intAwayScore") is not None) else "SCHEDULED"
            score = None
            if status == "FINISHED":
              hs, as_ = int(e.get("intHomeScore") or 0), int(e.get("intAwayScore") or 0)
              # Work out W/D/L from Man United perspective
              is_mu_home = (home.lower().strip() in ("manchester united","man utd","manchester u."))
              outcome = "D"
              if hs != as_:
                if (is_mu_home and hs>as_) or ((not is_mu_home) and as_<hs):
                  outcome = "W"
                else:
                  outcome = "L"
              score = {"home": hs, "away": as_, "outcome": outcome}
            return {
              "date": date.replace("T ", "T").strip()+"Z",
              "comp": comp,
              "home": home,
              "away": away,
              "status": status,
              "score": score
            }

          matches = []
          for e in (last.get("results") or []):
            matches.append(map_event(e))
          for e in (nxt.get("events") or []):
            matches.append(map_event(e))

          fixtures = {
            "team": "Manchester United",
            "updated": datetime.datetime.utcnow().isoformat()+"Z",
            "matches": matches
          }

          assets = pathlib.Path("assets"); assets.mkdir(exist_ok=True)
          (assets/"table.json").write_text(json.dumps(table, ensure_ascii=False, indent=2), encoding="utf-8")
          (assets/"fixtures.json").write_text(json.dumps(fixtures, ensure_ascii=False, indent=2), encoding="utf-8")
          (assets/"update_stamp.txt").write_text(datetime.datetime.utcnow().isoformat()+"Z", encoding="utf-8")
          PY

      - name: Commit assets
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add assets/*
            git commit -m "chore: refresh assets ($(date -u +'%Y-%m-%dT%H:%M:%SZ'))"
            git push
          else
            echo "No changes."
          fi
