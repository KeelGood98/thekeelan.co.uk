name: Update site data (TSDB table + MUFC fixtures)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "23 5 * * *"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build assets
        run: |
          python - <<'PY'
          import json, os, pathlib, time, urllib.request, urllib.error, datetime, sys

          def get(url, tries=4, sleep=1.2):
            for i in range(tries):
              try:
                req = urllib.request.Request(url, headers={
                  "User-Agent":"thekeelan-updater/1.0"
                })
                with urllib.request.urlopen(req, timeout=25) as r:
                  return json.loads(r.read().decode("utf-8"))
              except Exception as e:
                if i == tries-1:
                  print(f"[ERR] GET {url} -> {e}", file=sys.stderr)
                  raise
                time.sleep(sleep)

          # --- TheSportsDB league + season IDs ---
          # Premier League (TSDB league id 4328). Season string must match TSDB format.
          # Adjust if needed when the season rolls: "2024-2025", "2025-2026", etc.
          SEASON = os.environ.get("SEASON", "2024-2025")

          # 1) Premier League table
          table_api = f"https://www.thesportsdb.com/api/v1/json/3/lookuptable.php?l=4328&s={SEASON}"
          t = get(table_api) or {}
          rows = t.get("table") or []

          standings = []
          for r in rows:
            # Map TSDB fields to our schema
            standings.append({
              "pos": int(r.get("intRank") or 0),
              "team": r.get("strTeam") or "",
              "played": int(r.get("intPlayed") or 0),
              "won": int(r.get("intWin") or 0),
              "drawn": int(r.get("intDraw") or 0),
              "lost": int(r.get("intLoss") or 0),
              "gf": int(r.get("intGoalsFor") or 0),
              "ga": int(r.get("intGoalsAgainst") or 0),
              "gd": int(r.get("intGoalDifference") or 0),
              "pts": int(r.get("intPoints") or 0),
              "badge": r.get("strTeamBadge") or None
            })
          standings.sort(key=lambda x: x["pos"] or 999)

          table = {
            "season": SEASON,
            "updated": datetime.datetime.utcnow().isoformat()+"Z",
            "standings": standings
          }

          # 2) Manchester United fixtures/results
          team = get("https://www.thesportsdb.com/api/v1/json/3/searchteams.php?t=Manchester%20United") or {}
          try:
            team_id = team["teams"][0]["idTeam"]
          except Exception:
            print("[ERR] Could not resolve Man United team id from TSDB.", file=sys.stderr)
            sys.exit(1)

          last = get(f"https://www.thesportsdb.com/api/v1/json/3/eventslast.php?id={team_id}") or {}
          nxt  = get(f"https://www.thesportsdb.com/api/v1/json/3/eventsnext.php?id={team_id}") or {}

          def map_event(e):
            # best-effort ISO-ish timestamp
            date = (e.get("strTimestamp") or (e.get("dateEvent") or "") + "T" + (e.get("strTime") or "00:00:00")).strip(
