name: Update fixtures
on:
  workflow_dispatch: {}      # manual "Run workflow" button
  schedule:
    - cron: "23 5 * * *"     # daily at 05:23 UTC

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Update assets/fixtures.json
        env:
          FOOTBALL_DATA_API_KEY: ${{ secrets.FOOTBALL_DATA_API_KEY }}
        run: |
          python - <<'PY'
          import json, os, datetime, urllib.request

          API_KEY = os.environ.get("FOOTBALL_DATA_API_KEY")
          if not API_KEY:
            raise SystemExit("Missing FOOTBALL_DATA_API_KEY secret")

          TEAM_ID = 66  # Manchester United
          BASE = "https://api.football-data.org/v4/teams/{}/matches?dateFrom={}&dateTo={}"

          def fetch(url, headers=None):
            req = urllib.request.Request(url, headers=headers or {})
            with urllib.request.urlopen(req, timeout=30) as r:
              return json.loads(r.read().decode("utf-8"))

          today = datetime.date.today()
          date_from = (today - datetime.timedelta(days=30)).isoformat()
          date_to   = (today + datetime.timedelta(days=120)).isoformat()

          url = BASE.format(TEAM_ID, date_from, date_to)
          data = fetch(url, headers={"X-Auth-Token": API_KEY})

          fixtures = []
          for m in data.get("matches", []):
            utc_date = m["utcDate"][:10]      # YYYY-MM-DD
            utc_time = m["utcDate"][11:16]    # HH:MM
            comp = m["competition"]["name"]
            home = m["homeTeam"]["name"]
            away = m["awayTeam"]["name"]

            status_raw = (m.get("status") or "").upper()
            st
