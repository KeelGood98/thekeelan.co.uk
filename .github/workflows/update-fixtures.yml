name: Update fixtures (ESPN)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "23 5 * * *"   # daily 05:23 UTC

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build assets from ESPN
        run: |
          python - <<'PY'
          import json, os, urllib.request, datetime, sys, ssl
          ssl._create_default_https_context = ssl._create_unverified_context

          # ---- ESPN endpoints (correct) ----
          ESPN_SCHEDULE = "https://site.api.espn.com/apis/site/v2/sports/soccer/eng.1/teams/360/schedule"  # Man United id=360
          ESPN_TABLE    = "https://site.api.espn.com/apis/site/v2/sports/soccer/eng.1/standings"

          UA = {"User-Agent":"Mozilla/5.0"}

          def fetch(url):
            req = urllib.request.Request(url, headers=UA)
            with urllib.request.urlopen(req, timeout=60) as r:
              return json.loads(r.read().decode("utf-8"))

          def to_date_time(iso):
            try:
              d = datetime.datetime.fromisoformat(iso.replace("Z","+00:00"))
              return d.date().isoformat(), d.strftime("%H:%M")
            except Exception:
              return "", "TBC"

          def pick_name(x):
            # ESPN sometimes gives a string, sometimes an object with 'name'
            if isinstance(x, str): return x
            if isinstance(x, dict): return x.get("name") or x.get("shortName") or ""
            return ""

          def is_pl(comp_name, league_obj):
            name = (comp_name or "").lower()
            if "premier league" in name: return True
            # fallbacks from league object
            if isinstance(league_obj, dict):
              nm = (league_obj.get("name") or "").lower()
              ab = (league_obj.get("abbreviation") or "").lower()
              if "premier league" in nm: return True
              if ab in {"epl","pl"}: return True
            return False

          today = datetime.date.today()

          # ---------- Fixtures (past + future) ----------
          data = fetch(ESPN_SCHEDULE)
          events = (data.get("events") or []) + (data.get("nextEvents") or [])

          fixtures = []
          for ev in events:
            date, time = to_date_time(ev.get("date",""))
            comps = (ev.get("competitions") or [{}])[0]

            comp_name = pick_name(comps.get("name")) or pick_name(ev.get("league"))
            league_obj = ev.get("league") if isinstance(ev.get("league"), dict) else {}

            if not is_pl(comp_name, league_obj):
              continue  # only premier league

            # teams
            teams = comps.get("competitors") or []
            home, away = None, None
            for t in teams:
              if t.get("homeAway") == "home": home = t
              elif t.get("homeAway") == "away": away = t
            if not home or not away: 
              continue

            th, ta = home.get("team") or {}, away.get("team") or {}
            hname = th.get("displayName") or th.get("name") or ""
            aname = ta.get("displayName") or ta.get("name") or ""
            hbadge = th.get("logo") or (th.get("logos") or [{}])[0].get("href")
            abadge = ta.get("logo") or (ta.get("logos") or [{}])[0].get("href")

            stype = (ev.get("status") or {}).get("type",{})
            completed = bool(stype.get("completed"))
            state     = (stype.get("state") or "").lower()  # "pre","in","post"
            if completed:
              hs = int(home.get("score") or 0); as_ = int(away.get("score") or 0)
              score, stat = f"{hs}â€“{as_}", "FT"
            elif state in {"pre","scheduled"}:
              score, stat = None, "UPCOMING"
            else:
              score, stat = None, "upcoming"

            venue_name = (comps.get("venue") or {}).get("fullName") or ""

            fixtures.append({
              "date": date, "time": time or "TBC", "comp": comp_name,
              "home": hname, "away": aname, "status": stat, "score": score,
              "venue": venue_name, "tv": [],
              "homeBadge": hbadge, "awayBadge": abadge,
            })

          # dedup + sort
          seen, clean = set(), []
          for f in fixtures:
            k = (f["date"], f["home"], f["away"])
            if f["date"] and k not in seen:
              seen.add(k); clean.append(f)
          clean.sort(key=lambda x: (x["date"], x["time"], x["home"], x["away"]))

          os.makedirs("assets", exist_ok=True)
          with open("assets/fixtures.json","w",encoding="utf-8") as out:
            json.dump(clean, out, ensure_ascii=False, indent=2)
          print("fixtures written:", len(clean))

          # ---------- Standings (full table) ----------
          tdata = fetch(ESPN_TABLE)

          # Walk any shape until we find "entries"
          def find_entries(obj):
            if isinstance(obj, dict):
              st = obj.get("standings")
              if isinstance(st, dict) and "entries" in st:
                return st["entries"]
              for k, v in obj.items():
                res = find_entries(v)
                if res: return res
            if isinstance(obj, list):
              for it in obj:
                res = find_entries(it)
                if res: return res
            return None

          entries = find_entries(tdata) or []
          table, rank = [], 1
          for e in entries:
            team = e.get("team") or {}
            name = team.get("displayName") or team.get("name") or ""
            crest = team.get("logo") or (team.get("logos") or [{}])[0].get("href")
            stats = e.get("stats") or []

            def get(n, default=0):
              for s in stats:
                if s.get("name")==n:
                  try: return int(s.get("value"))
                  except: return default
              return default

            played = get("gamesPlayed")
            win    = get("wins")
            draw   = get("ties")
            loss   = get("losses")
            gf     = get("goalsFor") or get("pointsFor")
            ga     = get("goalsAgainst") or get("pointsAgainst")
            gd     = (gf or 0) - (ga or 0)
            points = get("points")

            table.append({
              "rank": rank, "team": name, "played": played,
              "win": win, "draw": draw, "loss": loss,
              "gf": gf, "ga": ga, "gd": gd, "points": points,
              "badge": crest,
            })
            rank += 1

          with open("assets/table.json","w",encoding="utf-8") as out:
            json.dump(table, out, ensure_ascii=False, indent=2)
          print("table written:", len(table))

          # bump a stamp so Pages rebuilds
          from datetime import timezone
          with open("assets/update_stamp.txt","w",encoding="utf-8") as f:
            f.write(datetime.datetime.now(timezone.utc).isoformat())
          PY

      - name: Commit & push (always)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add assets/*
          if git diff --cached --quiet; then
            git commit --allow-empty -m "chore: force pages rebuild (ESPN robust) [skip ci]"
          else
            git commit -m "chore: update fixtures & table from ESPN (robust) [skip ci]"
          fi
          git push
