name: Update fixtures

on:
  workflow_dispatch: {}
  schedule:
    - cron: "23 5 * * *"  # daily 05:23 UTC

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build assets (fixtures & table)
        run: |
          python - <<'PY'
          import json, os, urllib.request, urllib.parse, datetime, sys

          TEAM_ID = "133612"                  # Man Utd (TheSportsDB)
          TEAM_NAME = "Manchester United"
          LEAGUE_ID = "4328"                  # English Premier League

          def fetch(url: str):
            with urllib.request.urlopen(url, timeout=60) as r:
              return json.loads(r.read().decode("utf-8"))

          def current_season() -> str:
            today = datetime.date.today()
            if today.month >= 8:    # Aug..Dec → YEAR-YEAR+1
              return f"{today.year}-{today.year+1}"
            return f"{today.year-1}-{today.year}"

          def map_event(e: dict) -> dict:
            date = (e.get("dateEvent") or e.get("dateEventLocal") or "")[:10]
            time = (e.get("strTime") or e.get("strTimeLocal") or "00:00")[:5]
            comp = e.get("strLeague") or ""
            home = e.get("strHomeTeam") or ""
            away = e.get("strAwayTeam") or ""
            venue = e.get("strVenue") or ""
            status = "upcoming"
            score = None
            # Some feeds return null scores for future, ints for past
            if e.get("intHomeScore") is not None and e.get("intAwayScore") is not None:
              status = "FT"
              score = f'{e["intHomeScore"]}–{e["intAwayScore"]}'
            return {
              "date": date, "time": time, "comp": comp,
              "home": home, "away": away, "status": status, "score": score,
              "venue": venue, "tv": [],
              "homeBadge": None, "awayBadge": None,
            }

          def build_badge_map() -> dict:
            # pull ALL PL team badges; if Utd plays a non-PL team, badge may be None
            league = "English Premier League"
            url = "https://www.thesportsdb.com/api/v1/json/3/search_all_teams.php?l=" + urllib.parse.quote(league)
            try:
              data = fetch(url)
              teams = data.get("teams") or []
              return { (t.get("strTeam") or "").lower(): t.get("strTeamBadge") for t in teams if t.get("strTeam") }
            except Exception as ex:
              print("Badge map fetch failed:", ex, file=sys.stderr)
              return {}

          season = current_season()
          print("Season:", season)

          # Fixtures: full season + next + last to ensure we get past & future
          url_season = f"https://www.thesportsdb.com/api/v1/json/3/eventsseason.php?id={TEAM_ID}&s={season}"
          url_next   = f"https://www.thesportsdb.com/api/v1/json/3/eventsnext.php?id={TEAM_ID}"
          url_last   = f"https://www.thesportsdb.com/api/v1/json/3/eventslast.php?id={TEAM_ID}"

          all_events = []
          for name, url in [("season", url_season), ("next", url_next), ("last", url_last)]:
            try:
              data = fetch(url)
              key = "events" if name != "last" else "results"
              events = data.get(key) or []
              print(f"Fetched {name}: {len(events)}")
              all_events.extend(events)
            except Exception as ex:
              print(f"Fetch {name} failed:", ex, file=sys.stderr)

          # Keep only real Man Utd fixtures
          filtered = [
            e for e in all_events
            if (e.get("strHomeTeam") == TEAM_NAME or e.get("strAwayTeam") == TEAM_NAME)
          ]
          fixtures = [map_event(e) for e in filtered]

          # Badges
          badge_map = build_badge_map()
          for fx in fixtures:
            fx["homeBadge"] = badge_map.get((fx["home"] or "").lower())
            fx["awayBadge"] = badge_map.get((fx["away"] or "").lower())

          # Optional TV overrides
          tv_overrides = {}
          try:
            with open("assets/tv_overrides.json","r",encoding="utf-8") as f:
              tv_overrides = json.load(f)
          except FileNotFoundError:
            pass

          for fx in fixtures:
            opponent = fx["away"] if (fx["home"] or "").lower().startswith("man") else fx["home"]
            key = f'{fx["date"]} {opponent}'
            if key in tv_overrides:
              fx["tv"] = tv_overrides[key]

          # Sort + dedup
          fixtures.sort(key=lambda x: (x["date"], x["time"], x["home"], x["away"]))
          dedup, seen = [], set()
          for f in fixtures:
            k = (f["date"], f["home"], f["away"])
            if k not in seen:
              seen.add(k); dedup.append(f)

          os.makedirs("assets", exist_ok=True)
          with open("assets/fixtures.json","w",encoding="utf-8") as out:
            json.dump(dedup, out, ensure_ascii=False, indent=2)
          print("Wrote fixtures:", len(dedup))

          # Live Premier League table
          table_url = f"https://www.thesportsdb.com/api/v1/json/3/lookuptable.php?l={LEAGUE_ID}&s={season}"
          try:
            tab = fetch(table_url).get("table") or []
          except Exception as ex:
            print("Table fetch failed:", ex, file=sys.stderr)
            tab = []

          # Normalize minimal fields + badges
          table_rows = []
          for t in tab:
            table_rows.append({
              "rank": int(t.get("intRank") or 0),
              "team": t.get("strTeam") or "",
              "played": int(t.get("intPlayed") or 0),
              "win": int(t.get("intWin") or 0),
              "draw": int(t.get("intDraw") or 0),
              "loss": int(t.get("intLoss") or 0),
              "gf": int(t.get("intGoalsFor") or 0),
              "ga": int(t.get("intGoalsAgainst") or 0),
              "gd": int(t.get("intGoalsFor") or 0) - int(t.get("intGoalsAgainst") or 0),
              "points": int(t.get("intPoints") or 0),
              "badge": t.get("strTeamBadge"),
            })
          table_rows.sort(key=lambda r: r["rank"] or 999)

          with open("assets/table.json","w",encoding="utf-8") as out:
            json.dump(table_rows, out, ensure_ascii=False, indent=2)
          print("Wrote table rows:", len(table_rows))
          PY

      - name: Commit & push if changed
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add assets/fixtures.json assets/table.json
            git commit -m "chore: update fixtures & table (season + next/last + badges) [skip ci]"
            git push
          else
            echo "No changes."
          fi
