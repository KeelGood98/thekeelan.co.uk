name: Update fixtures

on:
  workflow_dispatch: {}        # manual "Run workflow" button
  schedule:
    - cron: "23 5 * * *"       # daily at 05:23 UTC

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write          # allow committing the updated JSON

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build assets/fixtures.json from TheSportsDB (season + next/last)
        run: |
          python - <<'PY'
          import json, os, urllib.request, datetime

          # TheSportsDB config
          TEAM_ID    = "133612"                 # Manchester United team id
          TEAM_NAME  = "Manchester United"      # exact filter
          EPL_LEAGUE = "4328"                   # Premier League (not directly used here)
          URL_NEXT   = f"https://www.thesportsdb.com/api/v1/json/3/eventsnext.php?id={TEAM_ID}"
          URL_LAST   = f"https://www.thesportsdb.com/api/v1/json/3/eventslast.php?id={TEAM_ID}"

          # Compute current season string, e.g. "2025-2026" (season runs Aug–May)
          today = datetime.date.today()
          if today.month >= 8:
              season = f"{today.year}-{today.year+1}"
          else:
              season = f"{today.year-1}-{today.year}"
          URL_SEASON = f"https://www.thesportsdb.com/api/v1/json/3/eventsseason.php?id={TEAM_ID}&s={season}"

          def fetch(url):
            with urllib.request.urlopen(url, timeout=45) as r:
              return json.loads(r.read().decode("utf-8"))

          def map_event(e):
            date  = (e.get("dateEvent") or e.get("dateEventLocal") or "")[:10]
            time  = (e.get("strTime") or e.get("strTimeLocal") or "00:00")[:5]
            comp  = e.get("strLeague") or ""
            home  = e.get("strHomeTeam") or ""
            away  = e.get("strAwayTeam") or ""
            venue = e.get("strVenue") or ""
            status = "upcoming"
            score  = None
            if e.get("intHomeScore") is not None and e.get("intAwayScore") is not None:
              status = "FT"
              score  = f'{e["intHomeScore"]}–{e["intAwayScore"]}'
            return {
              "date": date, "time": time, "comp": comp,
              "home": home, "away": away, "status": status, "score": score,
              "venue": venue, "tv": []
            }

          # Fetch season + next + last, then merge
          all_events = []

          try:
            season_data = fetch(URL_SEASON)
            all_events += (season_data.get("events") or [])
          except Exception as ex:
            print("Season fetch failed:", ex)

          try:
            next_data = fetch(URL_NEXT)
            all_events += (next_data.get("events") or [])
          except Exception as ex:
            print("Next fetch failed:", ex)

          try:
            last_data = fetch(URL_LAST)
            all_events += (last_data.get("results") or [])
          except Exception as ex:
            print("Last fetch failed:", ex)

          # Strictly keep only Man United fixtures/results
          mapped = [
            map_event(e) for e in all_events
            if (e.get("strHomeTeam") == TEAM_NAME or e.get("strAwayTeam") == TEAM_NAME)
          ]

          # Merge UK TV overrides if present
          tv_overrides = {}
          try:
            with open("assets/tv_overrides.json","r",encoding="utf-8") as f:
              tv_overrides = json.load(f)
          except FileNotFoundError:
            pass

          for fx in mapped:
            opponent = fx["away"] if fx["home"].lower().startswith("man") else fx["home"]
            key = f'{fx["date"]} {opponent}'
            if key in tv_overrides:
              fx["tv"] = tv_overrides[key]

          # Sort & de-dup
          mapped.sort(key=lambda x: (x["date"], x["time"]))
          seen, dedup = set(), []
          for f in mapped:
            k = (f["date"], f["home"], f["away"])
            if k not in seen:
              seen.add(k); dedup.append(f)

          os.makedirs("assets", exist_ok=True)
          with open("assets/fixtures.json","w",encoding="utf-8") as f:
            json.dump(dedup, f, ensure_ascii=False, indent=2)

          print("Season used:", season)
          print("Wrote assets/fixtures.json with", len(dedup), "entries")
          PY

      - name: Commit & push if changed
        run: |
