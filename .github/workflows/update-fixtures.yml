name: Update fixtures

on:
  workflow_dispatch: {}         # enables the "Run workflow" button
  schedule:
    - cron: "23 5 * * *"        # runs daily at 05:23 UTC (change if you like)

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write           # needed so we can commit the updated JSON

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Update assets/fixtures.json
        env:
          FOOTBALL_DATA_API_KEY: ${{ secrets.FOOTBALL_DATA_API_KEY }}
        run: |
          python - <<'PY'
          import json, os, datetime, urllib.request, urllib.error, sys

          API_KEY = os.environ.get("FOOTBALL_DATA_API_KEY")
          if not API_KEY:
              raise SystemExit("Missing FOOTBALL_DATA_API_KEY secret")

          TEAM_ID = 66  # Manchester United
          today = datetime.date.today()
          date_from = (today - datetime.timedelta(days=30)).isoformat()
          date_to   = (today + datetime.timedelta(days=120)).isoformat()

          # Base endpoint (team matches in a window)
          BASE = "https://api.football-data.org/v4/teams/{}/matches?dateFrom={}&dateTo={}"

          def fetch(u):
              req = urllib.request.Request(
                  u,
                  headers={
                      "X-Auth-Token": API_KEY,
                      "Accept": "application/json",
                      "User-Agent": "thekeelan-fixtures-bot"
                  }
              )
              try:
                  with urllib.request.urlopen(req, timeout=45) as r:
                      return json.loads(r.read().decode("utf-8"))
              except urllib.error.HTTPError as e:
                  body = e.read().decode("utf-8", "ignore")
                  print("HTTPError", e.code, e.reason)
                  print("URL:", u)
                  print("Response body:", body)
                  sys.exit(1)

          url = BASE.format(TEAM_ID, date_from, date_to)
          data = fetch(url)

          fixtures = []
          for m in data.get("matches", []):
              utc_date = m["utcDate"][:10]      # YYYY-MM-DD
              utc_time = m["utcDate"][11:16]    # HH:MM
              comp = m["competition"]["name"]
              home = m["homeTeam"]["name"]
              away = m["awayTeam"]["name"]

              status_raw = (m.get("status") or "").upper()
              status, score = "upcoming", None
              if status_raw in ("FINISHED","AWARDED"):
                  status = "FT"
                  ft = (m.get("score") or {}).get("fullTime") or {}
                  if ft.get("home") is not None and ft.get("away") is not None:
                      score = f'{ft["home"]}â€“{ft["away"]}'
              elif status_raw in ("IN_PLAY","PAUSED"):
                  status = "LIVE"

              fixtures.append({
                  "date": utc_date, "time": utc_time, "comp": comp,
                  "home": home, "away": away, "status": status, "score": score,
                  "venue": "", "tv": []
              })

          # Merge your manual UK TV channel overrides if present
          tv = {}
          try:
              with open("assets/tv_overrides.json","r",encoding="utf-8") as f:
                  tv = json.load(f)
          except FileNotFoundError:
              pass

          for fx in fixtures:
              opponent = fx["away"] if fx["home"].lower().startswith("man") else fx["home"]
              key = f'{fx["date"]} {opponent}'
              if key in tv:
                  fx["tv"] = tv[key]

          fixtures.sort(key=lambda x: (x["date"], x["time"]))
          os.makedirs("assets", exist_ok=True)
          with open("assets/fixtures.json","w",encoding="utf-8") as f:
              json.dump(fixtures, f, ensure_ascii=False, indent=2)

          print("Wrote assets/fixtures.json with", len(fixtures), "entries")
          PY

      - name: Commit & push if changed
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add assets/fixtures.json
            git commit -m "chore: auto-update fixtures [skip ci]"
            git push
          else
            echo "No changes."
          fi
