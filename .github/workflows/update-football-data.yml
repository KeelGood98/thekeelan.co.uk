name: Update site data (TSDB season â†’ table + MUFC fixtures)

on:
  schedule:
    - cron: "0 6 * * *"          # daily
  workflow_dispatch:
  workflow_call:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0        # allow rebase before push

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ---------- Premier League table (TSDB) ----------
      - name: Build assets/table.json (TSDB)
        run: |
          python - <<'PY'
          import json, time, urllib.request, urllib.parse, os
          from datetime import datetime

          os.makedirs("assets", exist_ok=True)

          def fetch(url, timeout=40):
            req = urllib.request.Request(url, headers={"User-Agent":"GitHubAction/1.0"})
            with urllib.request.urlopen(req, timeout=timeout) as r:
              return r.read()

          now = datetime.utcnow()
          start = now.year if now.month >= 7 else now.year - 1
          season = f"{start}-{start+1}"

          url = f"https://www.thesportsdb.com/api/v1/json/3/lookuptable.php?l=4328&s={urllib.parse.quote(season)}"
          data = json.loads(fetch(url).decode("utf-8"))
          table = data.get("table") or []

          rows = []
          for t in table:
            rows.append({
              "pos": int(t.get("intRank") or 0),
              "team": t.get("strTeam") or "",
              "played": int(t.get("intPlayed") or 0),
              "won": int(t.get("intWin") or 0),
              "drawn": int(t.get("intDraw") or 0),
              "lost": int(t.get("intLoss") or 0),
              "gf": int(t.get("intGoalsFor") or 0),
              "ga": int(t.get("intGoalsAgainst") or 0),
              "gd": int(t.get("intGoalDifference") or 0),
              "pts": int(t.get("intPoints") or 0)
            })
          rows.sort(key=lambda r: r["pos"] or 999)

          out = {
            "season": season,
            "source": "TheSportsDB",
            "updated": int(time.time()*1000),
            "standings": rows
          }
          with open("assets/table.json","w") as f: json.dump(out, f)
          print("Wrote assets/table.json with", len(rows), "rows for season", season)
          PY

      # ---------- MUFC fixtures (TSDB only; no ESPN) ----------
      - name: Build assets/fixtures.json (MUFC via TSDB)
        run: |
          python - <<'PY'
          import json, time, urllib.request, urllib.parse, os
          from datetime import datetime

          os.makedirs("assets", exist_ok=True)

          def fetch(url, timeout=40):
            req = urllib.request.Request(url, headers={"User-Agent":"GitHubAction/1.0"})
            with urllib.request.urlopen(req, timeout=timeout) as r:
              return r.read()

          def resolve_mu_id():
            try:
              u = "https://www.thesportsdb.com/api/v1/json/3/searchteams.php?t=Manchester%20United"
              j = json.loads(fetch(u).decode("utf-8"))
              for t in (j.get("teams") or []):
                if (t.get("strTeam") or "").lower() == "manchester united":
                  return t.get("idTeam")
            except Exception:
              pass
            return "133612"  # fallback

          mu_id = resolve_mu_id()

          now = datetime.utcnow()
          start = now.year if now.month >= 7 else now.year - 1
          season = f"{start}-{start+1}"

          def load_events():
            try:
              u = f"https://www.thesportsdb.com/api/v1/json/3/eventsseason.php?id={mu_id}&s={urllib.parse.quote(season)}"
              j = json.loads(fetch(u).decode("utf-8"))
              ev = j.get("events") or []
              if ev: return ev
            except Exception as e:
              print("eventsseason error:", e)
            ev = []
            try:
              last = json.loads(fetch(f"https://www.thesportsdb.com/api/v1/json/3/eventslast.php?id={mu_id}").decode("utf-8")).get("results") or []
              nxt  = json.loads(fetch(f"https://www.thesportsdb.com/api/v1/json/3/eventsnext.php?id={mu_id}").decode("utf-8")).get("events") or []
              ev = nxt + last
            except Exception as e:
              print("last/next error:", e)
            return ev

          def iso_from(e):
            ts = e.get("strTimestamp")
            if ts:
              ts = ts.replace(" ", "T")
              if "Z" not in ts and "+" not in ts:
                ts += "Z"
              return ts
            d  = (e.get("dateEvent") or "").strip()
            tm = (e.get("strTime") or "00:00:00").strip()
            if d and len(tm) == 5: tm += ":00"
            return f"{d}T{tm}" if d else ""

          def outcome_for_united(home, away, hs, as_):
            if hs in (None,"") or as_ in (None,""): return None
            try: hs, as_ = int(hs), int(as_)
            except: return None
            if home.lower() == "manchester united":
              return "W" if hs>as_ else "D" if hs==as_ else "L"
            if away.lower() == "manchester united":
              return "W" if as_>hs else "D" if as_==hs else "L"
            return None

          events = load_events()
          matches = []
          for e in events:
            date = iso_from(e)
            comp = e.get("strLeague") or ""
            home = e.get("strHomeTeam") or ""
            away = e.get("strAwayTeam") or ""
            hs   = e.get("intHomeScore")
            as_  = e.get("intAwayScore")
            score = None
            if hs not in (None,"") and as_ not in (None,""):
              try: score = {"home": int(hs), "away": int(as_)}
              except: pass
            status = "FINISHED" if score else "SCHEDULED"
            oc = outcome_for_united(home, away, hs, as_)
            if score and oc: score["outcome"] = oc
            matches.append({
              "date": date,
              "comp": comp,
              "home": home,
              "away": away,
              "status": status,
              "score": score,
              "tv": ""
            })

          out = {
            "team": "Manchester United",
            "season": season,
            "source": "TheSportsDB",
            "updated": int(time.time()*1000),
            "matches": matches
          }
          with open("assets/fixtures.json","w") as f: json.dump(out, f)
          print("Wrote assets/fixtures.json with", len(matches), "events")
          PY

      - name: Verify outputs
        run: |
          echo "== assets =="
          ls -lah assets || true
          echo "== preview table.json =="
          head -c 400 assets/table.json || true; echo
          echo "== preview fixtures.json =="
          head -c 400 assets/fixtures.json || true; echo

      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add assets/table.json assets/fixtures.json
          git commit -m "chore: refresh football data (table + fixtures via TSDB) $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "No changes"
          git pull --rebase origin main || true
          git push origin HEAD:main
