name: Update football data (table + badges + MUFC fixtures)

on:
  schedule:
    - cron: "5 5 * * *"   # daily 05:05 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ---- Build 20-team table (TheSportsDB) ----
      - name: Build assets/table.json
        run: |
          python - <<'PY'
          import json, time, urllib.request, urllib.parse, os, sys
          from datetime import datetime

          os.makedirs("assets", exist_ok=True)

          def get(url, timeout=45):
            req = urllib.request.Request(url, headers={"User-Agent":"thekeelan-actions/1.0"})
            with urllib.request.urlopen(req, timeout=timeout) as r:
              return r.read()

          # Season string (e.g. 2025-2026), season starts in July
          now = datetime.utcnow()
          start = now.year if now.month >= 7 else now.year - 1
          season = f"{start}-{start+1}"

          # PL league id on TSDB = 4328
          url = f"https://www.thesportsdb.com/api/v1/json/3/lookuptable.php?l=4328&s={urllib.parse.quote(season)}"
          try:
            data = json.loads(get(url).decode("utf-8"))
            table = data.get("table") or []

            rows = []
            for t in table:
              rows.append({
                "pos": int(t.get("intRank") or 0),
                "team": t.get("strTeam") or "",
                "played": int(t.get("intPlayed") or 0),
                "won": int(t.get("intWin") or 0),
                "drawn": int(t.get("intDraw") or 0),
                "lost": int(t.get("intLoss") or 0),
                "gf": int(t.get("intGoalsFor") or 0),
                "ga": int(t.get("intGoalsAgainst") or 0),
                "gd": int(t.get("intGoalDifference") or 0),
                "pts": int(t.get("intPoints") or 0)
              })

            rows.sort(key=lambda r: r["pos"] or 999)

            out = {
              "season": season,
              "source": "TheSportsDB",
              "updated": int(time.time()*1000),
              "standings": rows
            }
            with open("assets/table.json","w", encoding="utf-8") as f:
              json.dump(out, f, ensure_ascii=False)
            print(f"Wrote assets/table.json with {len(rows)} rows for {season}")
          except Exception as e:
            print("Table build failed:", e, file=sys.stderr)
            raise
          PY

      # ---- Build badges.json with crest URLs (TheSportsDB) ----
      - name: Build assets/badges.json
        run: |
          python - <<'PY'
          import json, time, urllib.request, urllib.parse, os

          os.makedirs("assets", exist_ok=True)

          def get(url, timeout=45):
            req = urllib.request.Request(url, headers={"User-Agent":"thekeelan-actions/1.0"})
            with urllib.request.urlopen(req, timeout=timeout) as r:
              return r.read()

          # All PL teams
          url = "https://www.thesportsdb.com/api/v1/json/3/search_all_teams.php?l=English%20Premier%20League"
          data = json.loads(get(url).decode("utf-8"))
          teams = data.get("teams") or []

          badges = {}
          for t in teams:
            name = t.get("strTeam") or ""
            crest = (t.get("strTeamBadge") or "").replace("http://","https://")
            if name:
              badges[name] = crest

          out = {"updated": int(time.time()*1000), "badges": badges}
          with open("assets/badges.json","w", encoding="utf-8") as f:
            json.dump(out, f, ensure_ascii=False)
          print(f"Wrote assets/badges.json with {len(badges)} entries")
          PY

      # ---- Build fixtures.json via helper script (Man United only) ----
      - name: Build assets/fixtures.json
        run: |
          python update_fixtures.py

      # ---- Touch update stamp (used by site header) ----
      - name: Touch update stamp
        run: |
          mkdir -p assets
          date -u +'%Y-%m-%dT%H:%M:%SZ' > assets/update_stamp.txt
          cat assets/update_stamp.txt

      # ---- Commit & push (safe for concurrent pushes) ----
      - name: Commit & push
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin "$GITHUB_REF_NAME" || true
          git add assets/table.json assets/badges.json assets/fixtures.json assets/update_stamp.txt
          git commit -m "chore: refresh football data $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "No changes"
          git push
