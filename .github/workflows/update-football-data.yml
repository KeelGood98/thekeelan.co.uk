name: Update site data (TSDB season â†’ table + MUFC fixtures)

on:
  schedule:
    - cron: "0 6 * * *"    # daily
  workflow_dispatch:
  workflow_call:           # <-- IMPORTANT for reusable workflow

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build assets/table.json (TSDB)
        run: |
          python - <<'PY'
          import json, time, urllib.request, urllib.parse, sys, os
          from datetime import datetime

          os.makedirs("assets", exist_ok=True)

          def fetch(url, timeout=30):
            req = urllib.request.Request(url, headers={"User-Agent":"GitHubAction/1.0"})
            with urllib.request.urlopen(req, timeout=timeout) as r:
              return r.read()

          now = datetime.utcnow()
          start = now.year if now.month >= 7 else now.year - 1
          season = f"{start}-{start+1}"

          url = f"https://www.thesportsdb.com/api/v1/json/3/lookuptable.php?l=4328&s={urllib.parse.quote(season)}"
          try:
            data = json.loads(fetch(url).decode("utf-8"))
            table = data.get("table") or []
            rows = []
            for t in table:
              rows.append({
                "pos": int(t.get("intRank") or 0),
                "team": t.get("strTeam") or "",
                "played": int(t.get("intPlayed") or 0),
                "won": int(t.get("intWin") or 0),
                "drawn": int(t.get("intDraw") or 0),
                "lost": int(t.get("intLoss") or 0),
                "gf": int(t.get("intGoalsFor") or 0),
                "ga": int(t.get("intGoalsAgainst") or 0),
                "gd": int(t.get("intGoalDifference") or 0),
                "pts": int(t.get("intPoints") or 0)
              })
            rows.sort(key=lambda r: r["pos"] or 999)

            out = {
              "season": season,
              "source": "TheSportsDB",
              "updated": int(time.time()*1000),
              "standings": rows
            }
            with open("assets/table.json","w") as f: json.dump(out, f)
            print("Wrote assets/table.json with", len(rows), "rows for season", season)
          except Exception as e:
            print("Table build failed:", e, file=sys.stderr)
          PY

      - name: Build assets/fixtures.json (update_fixtures.py)
        run: |
          python update_fixtures.py

      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add assets/table.json assets/fixtures.json
          git commit -m "chore: refresh football data (table + fixtures) $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "No changes"
          git push
