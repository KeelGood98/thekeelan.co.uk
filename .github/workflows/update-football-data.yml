name: Update site data (table + MUFC fixtures)

on:
  schedule:
    - cron: "0 6 * * *"        # daily at 06:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build assets/table.json from ESPN (20 teams)
        run: |
          python - <<'PY'
          import json, time, urllib.request, ssl

          ssl._create_default_https_context = ssl._create_unverified_context

          URL = "https://site.api.espn.com/apis/v2/sports/soccer/eng.1/standings"

          def fetch(url):
            req = urllib.request.Request(url, headers={"User-Agent":"Mozilla/5.0"})
            with urllib.request.urlopen(req, timeout=30) as r:
              return r.read()

          raw = json.loads(fetch(URL).decode("utf-8"))

          entries = []
          def walk(node):
            if isinstance(node, dict):
              if "standings" in node and node["standings"] and "entries" in node["standings"][0]:
                entries.extend(node["standings"][0]["entries"])
              for v in node.values(): walk(v)
            elif isinstance(node, list):
              for v in node: walk(v)

          walk(raw)

          rows = []
          for e in entries:
            team = (e.get("team") or {}).get("displayName","")
            stats = { s["name"]: s.get("value") for s in (e.get("stats") or []) if "name" in s }
            rows.append({
              "pos": int(stats.get("rank", 0)),
              "team": team,
              "played": int(stats.get("gamesPlayed", 0)),
              "won": int(stats.get("wins", 0)),
              "drawn": int(stats.get("ties", 0)),
              "lost": int(stats.get("losses", 0)),
              "gf": int(stats.get("pointsFor", 0)),        # goals for
              "ga": int(stats.get("pointsAgainst", 0)),    # goals against
              "gd": int(stats.get("pointDifferential", 0)),
              "pts": int(stats.get("points", 0))
            })

          rows = [r for r in rows if r["team"]]
          rows.sort(key=lambda r: r["pos"] or 999)

          out = {
            "source": "ESPN",
            "updated": int(time.time()*1000),
            "standings": rows
          }

          import os
          os.makedirs("assets", exist_ok=True)
          with open("assets/table.json","w") as f: json.dump(out, f)
          print("wrote assets/table.json with", len(rows), "rows")
          PY

      - name: Build assets/fixtures.json (MUFC only)
        run: |
          python update_fixtures.py

      - name: Touch update stamp
        run: |
          date -u +"%Y-%m-%dT%H:%M:%SZ" > assets/update_stamp.txt

      - name: Commit & push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add assets/table.json assets/fixtures.json assets/update_stamp.txt
          git commit -m "chore: refresh football data $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "No changes"
          git push
