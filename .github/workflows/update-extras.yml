name: Update extras data (weather + steam specials + F1)

on:
  schedule:
    - cron: "*/120 * * * *"   # every 2 hours
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build extras assets
        run: |
          python - <<'PY'
          import json, time, urllib.request, urllib.parse, sys, os

          def fetch(url, timeout=30):
            req = urllib.request.Request(
              url,
              headers={"User-Agent":"thekeelan-bot/1.0 (+github actions)"}
            )
            with urllib.request.urlopen(req, timeout=timeout) as r:
              return r.read()

          def write_json(path, obj):
            os.makedirs(os.path.dirname(path), exist_ok=True)
            with open(path, "w", encoding="utf-8") as f:
              json.dump(obj, f, ensure_ascii=False)

          now_ms = int(time.time()*1000)
          os.makedirs("assets", exist_ok=True)

          # --- Weather (Open-Meteo) ---
          try:
            wx_url = (
              "https://api.open-meteo.com/v1/forecast"
              "?latitude=53.8008&longitude=-1.5491"
              "&current=temperature_2m,apparent_temperature,is_day,weather_code,wind_speed_10m"
              "&daily=weather_code,temperature_2m_max,temperature_2m_min"
              "&timezone=Europe%2FLondon"
            )
            wx = json.loads(fetch(wx_url).decode("utf-8"))
            wx["updated"] = now_ms
            wx["location"] = "Leeds, UK"
            write_json("assets/weather.json", wx)
            print("✓ weather.json")
          except Exception as e:
            print("weather error:", e, file=sys.stderr)
            # keep previous file if present; no stub required

          # --- Steam Specials (Store API) ---
          try:
            # Featured categories contains "specials"
            sp = json.loads(fetch("https://store.steampowered.com/api/featuredcategories/?cc=GB&l=en").decode("utf-8"))
            items = (sp.get("specials") or {}).get("items") or []
            specials = []
            for it in items:
              specials.append({
                "id": it.get("id"),
                "name": it.get("name"),
                "original_price": it.get("original_price"),
                "final_price": it.get("final_price"),
                "discount_percent": it.get("discount_percent"),
                "capsule_image": it.get("capsule_image"),
                "url": f"https://store.steampowered.com/app/{it.get('id')}/" if it.get("id") else None
              })
            write_json("assets/steam_specials.json", {"updated": now_ms, "specials": specials})
            print(f"✓ steam_specials.json ({len(specials)} items)")
          except Exception as e:
            print("steam specials error:", e, file=sys.stderr)
            # still write a stub so the site doesn't break
            write_json("assets/steam_specials.json", {"updated": now_ms, "specials": []})

          # --- F1 results (Ergast) ---
          try:
            # Use HTTPS and include a large limit so we get all rounds
            f1 = json.loads(fetch("https://ergast.com/api/f1/current/results.json?limit=1000").decode("utf-8"))
            races = []
            for race in ((f1.get("MRData") or {}).get("RaceTable") or {}).get("Races", []):
              res = race.get("Results", [])
              if not res:
                continue
              winner = res[0]
              races.append({
                "round": race.get("round"),
                "name": race.get("raceName"),
                "date": f"{race.get('date','')}T{race.get('time','')}",
                "circuit": (race.get("Circuit") or {}).get("circuitName"),
                "winner": {
                  "driver": ((winner.get("Driver") or {}).get("familyName")),
                  "constructor": ((winner.get("Constructor") or {}).get("name")),
                  "grid": winner.get("grid"),
                  "time": (winner.get("Time") or {}).get("time"),
                  "status": winner.get("status")
                }
              })
            write_json("assets/f1.json", {"updated": now_ms, "races": races})
            print(f"✓ f1.json ({len(races)} races)")
          except Exception as e:
            print("f1 error:", e, file=sys.stderr)
            # Always leave a stub so the commit step succeeds and the UI shows a soft message
            write_json("assets/f1.json", {"updated": now_ms, "races": []})
            print("↳ wrote stub f1.json")
          PY

      - name: Commit and push
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Add whatever changed inside /assets (avoids 'pathspec did not match' errors)
          git add -A assets/
          git commit -m "chore: refresh extras $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "No changes"
          git push
