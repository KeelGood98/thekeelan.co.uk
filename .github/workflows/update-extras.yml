name: Update extras data (weather + steam specials + F1)

on:
  schedule:
    - cron: "*/120 * * * *"  # every 2 hours
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build extras assets
        run: |
          python - <<'PY'
          import json, time, urllib.request, urllib.parse, sys, os

          os.makedirs("assets", exist_ok=True)

          def fetch(url, timeout=30):
            req = urllib.request.Request(url, headers={"User-Agent":"GitHubAction/1.0"})
            with urllib.request.urlopen(req, timeout=timeout) as r:
              return r.read()

          # --- Leeds weather via Open-Meteo ---
          try:
            wx_url = ("https://api.open-meteo.com/v1/forecast"
                      "?latitude=53.8008&longitude=-1.5491"
                      "&current=temperature_2m,apparent_temperature,is_day,weather_code,wind_speed_10m"
                      "&daily=weather_code,temperature_2m_max,temperature_2m_min"
                      "&timezone=Europe%2FLondon")
            wx = json.loads(fetch(wx_url).decode("utf-8"))
            wx["updated"] = int(time.time()*1000)
            wx["location"] = "Leeds, UK"
            with open("assets/weather.json","w") as f: json.dump(wx, f)
            print("Wrote assets/weather.json")
          except Exception as e:
            print("Weather error:", e, file=sys.stderr)

          # --- Steam specials (keep this if you use it on Extras) ---
          try:
            specials_url = "https://www.cheapshark.com/api/1.0/deals?storeID=1&sortBy=Deal%20Rating&onSale=1&upperPrice=100"
            specials = json.loads(fetch(specials_url).decode("utf-8"))
            items=[]
            for d in specials:
              appid = d.get("steamAppID")
              url = f"https://store.steampowered.com/app/{appid}/" if appid else None
              items.append({
                "title": d.get("title",""),
                "steamAppID": appid,
                "url": url,
                "normalPrice": d.get("normalPrice"),
                "salePrice": d.get("salePrice"),
                "savings": d.get("savings"),
                "dealRating": d.get("dealRating"),
              })
            out = {"updated": int(time.time()*1000), "specials": items}
            with open("assets/steam_specials.json","w") as f: json.dump(out, f)
            print("Wrote assets/steam_specials.json (", len(items), "items )")
          except Exception as e:
            print("Steam specials error:", e, file=sys.stderr)

          # --- F1 results via Ergast -> assets/f1_results.json ---
          try:
            er = json.loads(fetch("https://ergast.com/api/f1/current/results.json?limit=1000").decode("utf-8"))
            races = er.get("MRData",{}).get("RaceTable",{}).get("Races",[])
            season = er.get("MRData",{}).get("RaceTable",{}).get("season")
            out = {"updated": int(time.time()*1000), "season": season, "races":[]}

            def pick(res_list, pos):
              pos = str(pos)
              rr = next((x for x in res_list if str(x.get("position") or x.get("positionText")) == pos), None)
              if not rr: return None
              d = rr.get("Driver") or {}
              code = d.get("code") or (d.get("familyName","")[:3]).upper()
              team = (rr.get("Constructor") or {}).get("name","")
              return {"code": code, "team": team}

            for r in races:
              res = r.get("Results") or []
              if len(res) < 3:   # race not finished yet
                continue
              out["races"].append({
                "date": r.get("date"),
                "name": r.get("raceName"),
                "podium": [pick(res,1), pick(res,2), pick(res,3)]
              })

            with open("assets/f1_results.json","w") as f: json.dump(out, f)
            print("Wrote assets/f1_results.json with", len(out["races"]), "races")
          except Exception as e:
            print("F1 build error:", e, file=sys.stderr)
          PY

      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add assets/weather.json assets/steam_specials.json assets/f1_results.json
          git commit -m "chore: refresh extras (weather + steam specials + F1) $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "No changes"
          git push
