name: Update extras (weather + Steam specials)

on:
  schedule:
    - cron: "15,45 * * * *"    # every ~30 mins
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: extras-data
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build extras assets
        run: |
          python - <<'PY'
          import json, time, urllib.request, sys, os

          def fetch(url, timeout=30):
            req = urllib.request.Request(url, headers={"User-Agent":"thekeelan-bot"})
            with urllib.request.urlopen(req, timeout=timeout) as r:
              return r.read()

          os.makedirs("assets", exist_ok=True)

          # Weather (Leeds, Open-Meteo)
          try:
            wx_url = ("https://api.open-meteo.com/v1/forecast"
                      "?latitude=53.8008&longitude=-1.5491"
                      "&current=temperature_2m,apparent_temperature,weather_code,wind_speed_10m"
                      "&timezone=Europe%2FLondon")
            wx = json.loads(fetch(wx_url).decode("utf-8"))
            wx["updated"] = int(time.time()*1000)
            wx["location"] = "Leeds, UK"
            with open("assets/weather.json","w") as f: json.dump(wx, f)
          except Exception as e:
            print("weather failed:", e, file=sys.stderr)

          # Steam specials (CheapShark â€“ store 1 is Steam)
          try:
            deals = json.loads(fetch("https://www.cheapshark.com/api/1.0/deals?storeID=1&sortBy=Savings&onSale=1&pageSize=40").decode())
            specials=[]
            for d in deals:
              try:
                normal = float(d.get("normalPrice", 0) or 0)
                sale   = float(d.get("salePrice",   0) or 0)
                if sale <= 0 or normal <= 0: 
                  continue
                pct = int(round((1 - sale/normal) * 100))
                title = d.get("title","")
                appid = d.get("steamAppID") or ""
                url   = f"https://store.steampowered.com/app/{appid}/" if appid else d.get("dealID","")
                specials.append({
                  "title": title,
                  "normalPrice": normal,
                  "salePrice": sale,
                  "discount": pct,
                  "url": url
                })
              except:
                pass
            specials.sort(key=lambda x: (-x["discount"], x["salePrice"]))
            with open("assets/steam_specials.json","w") as f:
              json.dump({"updated": int(time.time()*1000), "items": specials[:20]}, f)
          except Exception as e:
            print("specials failed:", e, file=sys.stderr)
          PY

      - name: Commit & push
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main || true
          git add assets/weather.json assets/steam_specials.json
          git commit -m "chore: refresh extras $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "No changes to commit"
          git push origin HEAD:main
